// 
// üîô Return to main document: [COTC Protocol Documentation](./cotc-protocol.md)
// üìç This file contains: Enhanced JIRA Integration with Intelligent Routing
//

// Import common types
import type {
  EnhancedViolation,
  EnhancedEnterpriseContract,
  HumanReviewOptimization,
  Stakeholder,
  StakeholderGroup,
  ExpertiseLevel
} from './cotc_protocol_common_types'

/**
 * JIRA Integration with Enhanced Security
 * Provides secure JIRA integration with cryptographic audit trails
 */

interface JIRATicketData {
  project: string
  issuetype: string
  summary: string
  description: string
  priority: string
  labels: string[]
  customfields: Record<string, any>
  security_level?: string
  encrypted_details?: string
}

interface SlackMessage {
  text: string
  blocks?: any[]
}

interface JIRATicketResult {
  ticket_id: string
  ticket_url: string
  created_at: Date
  audit_hash: string
}

class EnhancedJIRAIntegration {
  private jiraClient: any
  private encryptionService: any
  private auditLogger: any

  async createSecureTicket(
    violation: EnhancedViolation,
    contract: EnhancedEnterpriseContract
  ): Promise<JIRATicketResult> {
    // Enhanced ticket creation with security and audit trails
    const ticketData: JIRATicketData = {
      project: contract.integration.enterprise_systems.jira_integration.project_key,
      issuetype: contract.integration.enterprise_systems.jira_integration.issue_type,
      summary: `COTC V1.0 Violation: ${violation.description}`,
      description: this.generateEnhancedViolationDescription(violation, contract),
      priority: this.mapSeverityToPriority(contract.governance.severity),
      labels: ['cotc-V1.0', 'compliance', contract.governance.contract_type],
      customfields: {
        compliance_requirements: contract.governance.compliance_requirements,
        contract_id: contract.contract_id,
        validation_confidence: violation.confidence_score,
        diversity_score: violation.diversity_score,
        security_verified: violation.security_verified,
        regulatory_alignment: contract.enhanced_governance?.regulatory_alignment
      },
      // security fields
      security_level: this.mapSecurityClassification(contract.metadata.security_classification),
      encrypted_details: await this.encryptSensitiveDetails(violation.sensitive_data)
    }
    
    // Create ticket with cryptographic audit trail
    const ticket = await this.jiraClient.createTicket(ticketData)
    const auditHash = await this.auditLogger.logTicketCreation(ticket, violation)
    
    return {
      ticket_id: ticket.key,
      ticket_url: ticket.self,
      created_at: new Date(),
      audit_hash: auditHash
    }
  }

  private generateEnhancedViolationDescription(
    violation: EnhancedViolation, 
    contract: EnhancedEnterpriseContract
  ): string {
    return `
## COTC V1.0 Governance Violation Report

**Violation Summary:** ${violation.description}

**Validation Details:**
- **Confidence Score:** ${violation.confidence_score}
- **Diversity Score:** ${violation.diversity_score || 'N/A'}
- **Security Verified:** ${violation.security_verified ? 'Yes' : 'No'}
- **Validators Used:** ${(violation as any).validators_used?.join(', ') || 'Unknown'}
- **Ground Truth Verified:** ${(violation as any).ground_truth_verified ? 'Yes' : 'No'}

**Contract Information:**
- **Contract ID:** ${contract.contract_id}
- **Severity:** ${contract.governance.severity}
- **Compliance Requirements:** ${contract.governance.compliance_requirements.join(', ')}
- **Security Classification:** ${contract.metadata.security_classification}

**Required Actions:**
${(violation as any).required_actions?.join('\\n- ') || 'See validation report for details'}

**Audit Information:**
**Session ID:** ${(violation as any).session_id}
**Cryptographic Hash:** ${(violation as any).audit_hash}

---
*This ticket was automatically generated by COTC V1.0 with cryptographic audit trail verification.*
    `
  }

  private mapSeverityToPriority(severity: string): string {
    const mapping: Record<string, string> = {
      'critical': 'Highest',
      'high': 'High', 
      'medium': 'Medium',
      'low': 'Low'
    }
    return mapping[severity] || 'Medium'
  }

  private mapSecurityClassification(classification: string): string {
    const mapping: Record<string, string> = {
      'restricted': '10000',
      'confidential': '10001',
      'internal': '10002',
      'public': '10003'
    }
    return mapping[classification] || '10002'
  }

  private async encryptSensitiveDetails(sensitiveData: any): Promise<string> {
    if (!sensitiveData) return ''
    return await this.encryptionService.encrypt(JSON.stringify(sensitiveData))
  }
}
